---
layout:     post
title:      常用shell命令的深入理解（一）
category:   技术
excerpt: 给一直在用，却没有时间理清楚的ssh一个全面的解释
date:   2016-07-17 14:16:02
tags:
    - linux
    - ssh
---

#常用shell命令的深入理解（一）
一年多之前，开始从事数据相关的工作。经常需要登陆远程主机进行一些操作，因而也接触了不少linux shell命令。然而，很多命令都是哪来即用，很少去关心这个命令的参数是什么含义，有什么其他适用场景。可谓知其然而不知其所以然。时间长了，除了命令敲的快了，自己似乎并没有什么长进。遇到新的操作，依然主要依赖google。
是时候好好理解一下自己平时不经脑子就敲出的命令了。《常用shell命令的深入理解》系列就是着么一个主题
## 关于SSH
要操作远程主机，自然要登陆远程主机。SSH命令就常常成为我们一大串操作的一个命令，例如：


     ssh -A user@host

SSH是计算机之间的加密远程登陆协议。通过SSH登陆，我们可以认为这次登陆行为是安全的。即使登陆中途信息被截获，密码也是加了秘的，安全的。
SSH的加密流程是这样的：

 1. 远程主机接收到登陆请求，把自己的公钥发送给客户机
 2. 客户机用远程主机的公钥加密自己的密码后把用户名密码发送给远程主机
 3. 远程主机用自己的私钥解密密码之后，验证密码是否正确。若正确，登陆成功。

### 私钥公钥
关于公钥私钥，可以着么理解：公钥类似一把锁，私钥类似一把钥匙，私钥可以打开公钥这把“锁”。私钥拥有者有无数把锁，他把锁发给所有和他通信的人，让他们把自己的信息用锁锁上。只有自己能解开，这样信息即使中途丢了，别人也解不开。关于公钥、私钥的更详细解释，可以看[这里][1]。

有了这套机制还不够，著名的[中间人攻击][2]就是截获客户机的登陆请求后，发送自己的公钥给客户机。然后再截获客户机通过自己的公钥加密的密码后，用自己的私钥解密，获得用户的密码。

### 公钥指纹
通常，在我们第一次试图登陆某个远程主机的时候, 会出现：
![登陆认证][3]

RSA key 就是公钥， 指纹（fingerprint）是公钥通过[MD5][4]等加密算法得到的一个特征值。可以唯一标示一个公钥。一般正规机构会在自己的主页上贴出公钥的指纹，方便用户核对，验证主机的真实性。
输入yes之后，用户通过SSH登陆该主机。同时，该主机的信息会被记录在`~/.ssh/known_hosts`文件中，下次访问该主机就不用验证公钥指纹了。

### 无密码登陆
如果每次SSH登陆都要输入密码，也是很麻烦的一件事。既然公钥私钥可以用来做加密解密，那么同样，也可以作为身份验证的一种方式（互相能解密对方加密的内容，就是一种身份认证）。
SSH便提供了无密码登陆功能。这一次，公钥、私钥换了个身份： 用户将自己的公钥保存在要登陆的主机上，登陆的时候，远程主机发送一串随机字符串给客户机，客户机用自己的私钥加密后发送给远程主机。主机用客户机的私钥解密，如果能和之前发送的随机字符串对上，即认证了用户身份，允许登陆。

    ssh-keygen
    ssh-copy-id user@host
上面两条命令可以实现无密码登陆，第一条命令生成用户的公钥私钥放在`~/.ssh`目录下，第二条命令拷贝公钥到相应远程主机的`~/.ssh/authorized_keys`文件中。
无密码登录再搭建集群，比如hadoop集群的时候，比较实用。可以方便集群内多台机器同步配置。

### 参数用法
详细的ssh参数用法可以看[这里][5]。那么多，咱也记不住，这里就列一些自己用过的，以及比较常用的用法：

    ssh -A user@host  //允许转发认证代理的连接
    ssh -a user@host  //禁止转发认证代理的连接

可能你已经发现，刚刚我举的例子有一个-A参数。这个参数是干嘛的呢？网上找到的说明是“允许转发认证代理的连接”。按照我的理解，大致的意思是：假如客户机A用公钥认证的方式可以登陆远程主机B、C。那么从B ssh登陆到C的时候，我们依然需要输入密码，很麻烦不是？
如果我们从A登陆B的时候带上 -A参数，含义类似于这样：“这是一个转发代理的连接，以后从B ssh登陆任何一台机器的时候等同于从A登陆这台机器”。 则样，我们从B登陆C的时候就不需要输入密码啦。

    ssh -p XXX user@host

默认ssh登陆请求会发送到22端口， 用-p命令可以实现登陆远程主机的不同端口。用这个命令可以实现[SSH隧道][6]等高端用法。

    ssh host

如果登陆名和本地用户名一致的话，可以省去登陆用户名。

### 结束语
Linux系统博大精深，没有时间揽其全貌，只能管中窥豹。希望通过这一系列的博客把见到的每一“斑”都弄清楚，记下来，与大家分享。不求左右逢源，只求对于自己敲下的命令的每一个字母都理解，便是心安理得了。 SSH还有不少高端的用法，本篇只介绍皮毛，日后若接触更精深的用法，再来这里笔耕把。

### 参考文章

 1. [公钥，私钥和数字签名这样最好理解][7]
 2. [中间人攻击(MITM)姿势总结][8]
 3. [SSH原理与运用][9]
 4. [ssh命令详解][10]
 5. [关于ssh私钥管理与认证代理应用][11]
 6. [实战 SSH 端口转发][12]

  [1]: http://blog.csdn.net/21aspnet/article/details/7249401
  [2]: http://www.cnblogs.com/LittleHann/p/3735602.html
  [3]: http://7xr9qj.com1.z0.glb.clouddn.com/Screen%20Shot%202016-07-15%20at%208.49.33%20PM.png
  [4]: http://baike.baidu.com/view/7636.htm
  [5]: http://man.linuxde.net/ssh
  [6]: https://www.ibm.com/developerworks/cn/linux/l-cn-sshforward/
  [7]: http://blog.csdn.net/21aspnet/article/details/7249401
  [8]: http://www.cnblogs.com/LittleHann/p/3735602.html
  [9]: http://www.ruanyifeng.com/blog/2011/12/ssh_remote_login.html
  [10]: http://blog.sina.com.cn/s/blog_48dd4b84010002ki.html
  [11]: https://blog.yousri.org/2012/01/05/about-ssh-key-authentication-manage-and-ssh-agent-application.html
  [12]: https://www.ibm.com/developerworks/cn/linux/l-cn-sshforward/
